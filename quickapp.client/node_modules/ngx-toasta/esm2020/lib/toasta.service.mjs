import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { isString, isNumber, isFunction } from './toasta.utils';
import * as i0 from "@angular/core";
/**
 * Options to configure a new Toast
 */
export class ToastOptions {
}
ToastOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ToastOptions, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ToastOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ToastOptions });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ToastOptions, decorators: [{
            type: Injectable
        }] });
/**
 * Structrure of a created Toast
 */
export class ToastData {
}
ToastData.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ToastData, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ToastData.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ToastData });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ToastData, decorators: [{
            type: Injectable
        }] });
/**
 * Default configuration for all toasts and toasta container
 */
export class ToastaConfig {
    constructor() {
        // Maximum number of toasties to show at once
        this.limit = 5;
        // Whether to show the 'X' icon to close the toast
        this.showClose = true;
        // Whether to show a progress bar at the bottom of the notification
        this.showDuration = true;
        // The window position where the toast pops up
        this.position = 'bottom-right';
        // How long (in miliseconds) the toasta shows before it's removed. Set to null/0 to turn off.
        this.timeout = 5000;
        // What theme to use
        this.theme = 'default';
    }
}
ToastaConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ToastaConfig, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ToastaConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ToastaConfig });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ToastaConfig, decorators: [{
            type: Injectable
        }] });
export var ToastaEventType;
(function (ToastaEventType) {
    ToastaEventType[ToastaEventType["ADD"] = 0] = "ADD";
    ToastaEventType[ToastaEventType["CLEAR"] = 1] = "CLEAR";
    ToastaEventType[ToastaEventType["CLEAR_ALL"] = 2] = "CLEAR_ALL";
})(ToastaEventType || (ToastaEventType = {}));
export class ToastaEvent {
    constructor(type, value) {
        this.type = type;
        this.value = value;
    }
}
export function toastaServiceFactory(config) {
    return new ToastaService(config);
}
/**
 * Toasta service helps create different kinds of Toasts
 */
export class ToastaService {
    constructor(config) {
        this.config = config;
        // Init the counter
        this.uniqueCounter = 0;
        // ToastData event emitter
        // private toastsEmitter: EventEmitter<ToastData> = new EventEmitter<ToastData>();
        // Clear event emitter
        // private clearEmitter: EventEmitter<number> = new EventEmitter<number>();
        this.eventSource = new Subject();
        this.events = this.eventSource.asObservable();
    }
    /**
     * Get list of toats
     */
    // getToasts(): Observable<ToastData> {
    //   return this.toastsEmitter.asObservable();
    // }
    // getClear(): Observable<number> {
    //   return this.clearEmitter.asObservable();
    // }
    /**
     * Create Toast of a default type
     */
    default(options) {
        this.add(options, 'default');
    }
    /**
     * Create Toast of info type
     * @param options Individual toasta config overrides
     */
    info(options) {
        this.add(options, 'info');
    }
    /**
     * Create Toast of success type
     * @param options Individual toasta config overrides
     */
    success(options) {
        this.add(options, 'success');
    }
    /**
     * Create Toast of wait type
     * @param options Individual toasta config overrides
     */
    wait(options) {
        this.add(options, 'wait');
    }
    /**
     * Create Toast of error type
     * @param options Individual toasta config overrides
     */
    error(options) {
        this.add(options, 'error');
    }
    /**
     * Create Toast of warning type
     * @param options Individual toasta config overrides
     */
    warning(options) {
        this.add(options, 'warning');
    }
    // Add a new toast item
    add(options, type) {
        let toastaOptions;
        if (isString(options) && options !== '' || isNumber(options)) {
            toastaOptions = {
                title: options.toString()
            };
        }
        else {
            toastaOptions = options;
        }
        if (!toastaOptions || !toastaOptions.title && !toastaOptions.msg) {
            throw new Error('ngx-toasta: No toast title or message specified!');
        }
        type = type || 'default';
        // Set a unique counter for an id
        this.uniqueCounter++;
        // Set the local vs global config items
        const showClose = this._checkConfigBooleanItem(this.config, toastaOptions, 'showClose');
        // Set the local vs global config items
        const showDuration = this._checkConfigBooleanItem(this.config, toastaOptions, 'showDuration');
        // If we have a theme set, make sure it's a valid one
        let theme;
        if (toastaOptions.theme) {
            theme = ToastaService.THEMES.indexOf(toastaOptions.theme) > -1 ? toastaOptions.theme : this.config.theme;
        }
        else {
            theme = this.config.theme;
        }
        const toast = {
            id: this.uniqueCounter,
            title: toastaOptions.title,
            msg: toastaOptions.msg,
            showClose,
            showDuration,
            type: 'toasta-type-' + type,
            theme: 'toasta-theme-' + theme,
            // If there's a timeout individually or globally, set the toast to timeout
            // Allows a caller to pass null/0 and override the default. Can also set the default to null/0 to turn off.
            timeout: toastaOptions.hasOwnProperty('timeout') ? toastaOptions.timeout ?? 0 : this.config.timeout,
            onAdd: toastaOptions.onAdd && isFunction(toastaOptions.onAdd) ? toastaOptions.onAdd : undefined,
            onRemove: toastaOptions.onRemove && isFunction(toastaOptions.onRemove) ? toastaOptions.onRemove : undefined
        };
        // Push up a new toast item
        // this.toastsSubscriber.next(toast);
        // this.toastsEmitter.next(toast);
        this.emitEvent(new ToastaEvent(ToastaEventType.ADD, toast));
        // If we have a onAdd function, call it here
        if (toastaOptions.onAdd && isFunction(toastaOptions.onAdd)) {
            toastaOptions.onAdd.call(this, toast);
        }
    }
    // Clear all toasts
    clearAll() {
        // this.clearEmitter.next(null);
        this.emitEvent(new ToastaEvent(ToastaEventType.CLEAR_ALL));
    }
    // Clear the specific one
    clear(id) {
        // this.clearEmitter.next(id);
        this.emitEvent(new ToastaEvent(ToastaEventType.CLEAR, id));
    }
    // Checks whether the local option is set, if not,
    // checks the global config
    _checkConfigBooleanItem(config, options, property) {
        if (options[property] === false) {
            return false;
        }
        else if (!options[property]) {
            return config[property];
        }
        else {
            return true;
        }
    }
    emitEvent(event) {
        if (this.eventSource) {
            // Push up a new event
            this.eventSource.next(event);
        }
    }
}
// Allowed THEMES
ToastaService.THEMES = ['default', 'material', 'bootstrap'];
ToastaService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ToastaService, deps: [{ token: ToastaConfig }], target: i0.ɵɵFactoryTarget.Injectable });
ToastaService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ToastaService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ToastaService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: ToastaConfig }]; } });
//# sourceMappingURL=data:application/json;base64,