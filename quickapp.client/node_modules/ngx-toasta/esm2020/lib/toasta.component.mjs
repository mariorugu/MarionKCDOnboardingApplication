import { Component, Input } from '@angular/core';
import { isFunction } from './toasta.utils';
import { ToastaEventType } from './toasta.service';
import * as i0 from "@angular/core";
import * as i1 from "./toasta.service";
import * as i2 from "@angular/common";
import * as i3 from "./toast.component";
/**
 * Toasta is container for Toast components
 */
export class ToastaComponent {
    // The window position where the toast pops up. Possible values:
    // - bottom-right (default value from ToastConfig)
    // - bottom-left
    // - bottom-center
    // - bottom-fullwidth
    // - top-right
    // - top-left
    // - top-center
    // - top-fullwidth
    // - center-center
    set position(value) {
        if (value) {
            let notFound = true;
            for (let i = 0; i < ToastaComponent.POSITIONS.length; i++) {
                if (ToastaComponent.POSITIONS[i] === value) {
                    notFound = false;
                    break;
                }
            }
            if (notFound) {
                // Position was wrong - clear it here to use the one from config.
                value = this.config.position;
            }
        }
        else {
            value = this.config.position;
        }
        this._position = 'toasta-position-' + value;
    }
    get position() {
        return this._position;
    }
    constructor(config, toastaService) {
        this.config = config;
        this.toastaService = toastaService;
        this._position = '';
        // The storage for toasts.
        this.toasts = [];
        // Initialise position
        this.position = '';
    }
    /**
     * `ngOnInit` is called right after the directive's data-bound properties have been checked for the
     * first time, and before any of its children have been checked. It is invoked only once when the
     * directive is instantiated.
     */
    ngOnInit() {
        // We listen events from our service
        this.toastaService.events.subscribe((event) => {
            if (event.type === ToastaEventType.ADD) {
                // Add the new one
                const toast = event.value;
                this.add(toast);
            }
            else if (event.type === ToastaEventType.CLEAR) {
                // Clear the one by number
                const id = event.value;
                this.clear(id);
            }
            else if (event.type === ToastaEventType.CLEAR_ALL) {
                // Lets clear all toasts
                this.clearAll();
            }
        });
    }
    /**
     * Event listener of 'closeToast' event comes from ToastaComponent.
     * This method removes ToastComponent assosiated with this Toast.
     */
    closeToast(toast) {
        this.clear(toast.id);
    }
    /**
     * Add new Toast
     */
    add(toast) {
        // If we've gone over our limit, remove the earliest
        // one from the array
        if (this.config.limit && this.toasts.length >= this.config.limit) {
            this.toasts.shift();
        }
        // Add toasta to array
        this.toasts.push(toast);
        //
        // If there's a timeout individually or globally,
        // set the toast to timeout
        if (+toast.timeout) {
            this._setTimeout(toast);
        }
    }
    /**
     * Clear individual toast by id
     * @param id is unique identifier of Toast
     */
    clear(id) {
        if (id) {
            this.toasts.forEach((value, key) => {
                if (value.id === id) {
                    if (value.onRemove && isFunction(value.onRemove)) {
                        value.onRemove.call(this, value);
                    }
                    this.toasts.splice(key, 1);
                }
            });
        }
        else {
            throw new Error('Please provide id of Toast to close');
        }
    }
    /**
     * Clear all toasts
     */
    clearAll() {
        this.toasts.forEach((value, key) => {
            if (value.onRemove && isFunction(value.onRemove)) {
                value.onRemove.call(this, value);
            }
        });
        this.toasts = [];
    }
    /**
     * Custom setTimeout function for specific setTimeouts on individual toasts.
     */
    _setTimeout(toast) {
        window.setTimeout(() => {
            this.clear(toast.id);
        }, toast.timeout);
    }
}
/**
 * Set of constants defines position of Toasta on the page.
 */
ToastaComponent.POSITIONS = ['bottom-right', 'bottom-left', 'bottom-center', 'bottom-fullwidth', 'top-right', 'top-left', 'top-center', 'top-fullwidth', 'center-center'];
ToastaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ToastaComponent, deps: [{ token: i1.ToastaConfig }, { token: i1.ToastaService }], target: i0.ɵɵFactoryTarget.Component });
ToastaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.2", type: ToastaComponent, selector: "ngx-toasta", inputs: { position: "position" }, ngImport: i0, template: `
    <div id="toasta" [ngClass]="[position]">
        <ngx-toast *ngFor="let toast of toasts" [toast]="toast" (closeToast)="closeToast(toast)"></ngx-toast>
    </div>`, isInline: true, dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i3.ToastComponent, selector: "ngx-toast", inputs: ["toast"], outputs: ["closeToast"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ToastaComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-toasta',
                    template: `
    <div id="toasta" [ngClass]="[position]">
        <ngx-toast *ngFor="let toast of toasts" [toast]="toast" (closeToast)="closeToast(toast)"></ngx-toast>
    </div>`
                }]
        }], ctorParameters: function () { return [{ type: i1.ToastaConfig }, { type: i1.ToastaService }]; }, propDecorators: { position: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,